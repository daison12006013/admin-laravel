{"name":"Laravel Admin","tagline":"Tired of dealing with your own custom admin panel? Here comes the Package, it makes everything so easy!","body":"# Laravel Admin\r\nI'm still keep on updating this admin package, when you are using the ``dev-master`` you will see some sample routes and navigation links, those are my examples to test all the functionality of this package. Each release has a branch and you need to switch for the said branch you used for specific README file.\r\n\r\nAnyhow, I'm using this <a href=\"http://www.blacktie.co/demo/dashgumfree/\">http://www.blacktie.co/demo/dashgumfree/</a> as my  base template, so try to review the design, later on I'll be importing other admin templates that you can use. Thumbs Up!\r\n\r\n\r\n# Start Up\r\nInclude this to your composer, if you want the most updated branch, use ``dev-master``\r\n```\r\n  \t\"require\": {\r\n  \t\t\"daison/admin-laravel\": \"1.0.0\"\r\n  \t}\r\n```\r\n\r\n\r\n<br>\r\nUpdate your composer\r\n```\r\n    composer update\r\n```\r\n<br>\r\nGo to <b>/app/config/app.php</b> and add this line\r\n```\r\n    'Daison\\Admin\\AdminServiceProvider',\r\n```\r\n<br>\r\nGo to your command line and publish the config, view and assets\r\n```\r\n    php artisan config:publish daison/admin-laravel\r\n    php artisan view:publish daison/admin-laravel\r\n    php artisan asset:publish daison/admin-laravel --path=\"vendor/daison/admin-laravel/src/assets\"\r\n```\r\n<br>\r\nSetup your database and laravel configuration, and run the package migrations\r\n```\r\n    php artisan migrate --package=\"daison/admin-laravel\"\r\n```\r\n\r\nOr if you have an existing Users table then use publish\r\n```\r\n    php artisan migrate:publish daison/admin-laravel\r\n```\r\n\r\n# Pre-Testing\r\nGo to your browser <b>localhost:8080/admin</b>\r\n  You can now access the admin login page\r\n  \r\n  Go to your command line, and lets create an account to test this admin panel\r\n  ```\r\n    php artisan tinker\r\n    > $user = new User;\r\n    > $user->email = \"email@gmail.com\";\r\n    > $user->password = Hash::make('abcd');\r\n    > $user->save();\r\n    > $role = new Role;\r\n    > $role->name = 'superuser';\r\n    > $role->save();\r\n    > $user_role = new UserHasRole;\r\n    > $user_role->user_id = $user->id;\r\n    > $user_role->role_id = $role->id;\r\n    > $user_role->save();\r\n  ```\r\n\r\n  Go back to the page, and log your recently created account.\r\n  \r\n  Tadda! Now you can see the navigation bar, the site name, and even the logout button, let's move to configuration.\r\n\r\n# Configuration\r\nRemember we used this command <b>php artisan config:publish daison/admin-laravel</b>\r\nGo to /app/config/packages/daison/admin-laravel/ folder\r\nyou can see these files\r\n  <ul>\r\n    <li>lang\r\n      <ul>\r\n        <li>en.php</li>\r\n      </ul>\r\n    </li>\r\n    <li>general.php</li>\r\n    <li>navigations.php</li>\r\n    <li>routes.php</li>\r\n  </ul>\r\n\r\n####Navigation\r\nLets create our sample navigation,\r\n```\r\n    [name] => [\r\n      'name' => 'Navigation Name',\r\n      'icon' => 'fa fa-home fa-fv',\r\n      'url'  => '/admin/sample',\r\n      'items'=> [\r\n          [name] => [\r\n              'name' => 'Second Level Nav Name',\r\n              'icon  => '',\r\n              'url'  => '/admin/sample/1',\r\n          ],\r\n          [name] => [\r\n              'name' => 'Second Level Nav Name',\r\n              'icon  => '',\r\n              'url'  => '/admin/sample/2',\r\n          ],\r\n      ],\r\n    ],\r\n```\r\nAfter creating these links with [items], refresh your page and see changes. You can even use ``'roles' => ['superuser']`` to limit the view access.\r\n\r\n####Routes\r\nBased from our navigation links, we need to create a route to assign the controller to work with. You can also use the original routes file from /app/config/routes.php, but I suggest to use this approach to separate your original routes from admin routes.\r\n  ```\r\n  'admin_sample_get' => [\r\n    'process' => 'get',\r\n    'url'     => '/admin/sample/',\r\n    'uses'    => 'SampleController@showSample',\r\n  ],\r\n  'admin_sample_post' => [\r\n    'process' => 'post',\r\n    'url'     => '/admin/sample/',\r\n    'uses'    => 'SampleController@saveSample',\r\n  ],\r\n  'admin_sample_rest_get' => [\r\n    'process' => 'get',\r\n    'url'     => '/admin/inventory/{id}/edit',\r\n    'uses'    => 'InventoryController@showEditItem',\r\n  ],\r\n  'admin_sample_rest_post' => [\r\n    'process' => 'post',\r\n    'url'     => '/admin/inventory/{id}/edit',\r\n    'uses'    => 'InventoryController@updateItem',\r\n  ],\r\n  ```\r\n  Now create your SampleController / InventoryController and it's up to you to handle the responses. You can even assign ``'roles' => ['superuser']`` to restrict each request, you can also provide ``'is_auth' => true`` to redirect guest to the login page.\r\n\r\n\r\n####Still using Main Routes\r\n  So you still want to use the main `app/routes.php`, however you want to use the roles management to your routes.\r\nGo to your controller `__construct` and do the constructor injection.\r\n\r\n```\r\n  use Daison\\Admin\\Admin;\r\n  \r\n  class MyController\r\n  {\r\n    private $admin;\r\n    public function __construct(Admin $admin)\r\n    {\r\n      $this->admin = $admin;\r\n    }\r\n    \r\n    public function showProfile()\r\n    {\r\n      if ($this->admin->hasAnAccess(['superuser','agent']) == false) {\r\n        // It means the Authenticated user doesn't have roles\r\n        // Redirect the user, show the access not allowed page... and so on..\r\n      }\r\n    }\r\n    \r\n    public function saveProfile()\r\n    {\r\n      // same thing as the showProfile() method.\r\n    }\r\n  }\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}